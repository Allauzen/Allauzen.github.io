---
title: "Introduction to Deep Learning, ESPCI"
date: 2019-03-06
layout: page
categories: 
tags: 
- cours 
- NNet 
- espci
published: true
comments: 
---
<hr>


<p>
This course is an introduction to deep-learning approach with lab
sessions in <a href="https://pytorch.org/">pytorch (python module)</a>.  The goal is to understand the
data-driven approach and to be able to efficiently experiment with deep-learning on real data. 
</p>


<div id="outline-container-org865109a" class="outline-2">
<h2 id="org865109a">News</h2>
<div class="outline-text-2" id="text-org865109a">
<ul class="org-ul">
<li>Course update : "confinement" !</li>
<li>Are you sure you registered your team for the project (see the drive) ?</li>
</ul>
</div>



<div id="outline-container-org98c2b9b" class="outline-3">
<h3 id="org98c2b9b">Modified organisation (in French)</h3>
<div class="outline-text-3" id="text-org98c2b9b">
<p>
Suite aux conséquences du Coronavirus, l'organisation du cours
"Introduction au Deep-Learning" est modifiée.  Nous allons nous
concentrer sur les projets à rendre. La date est fixée désormais au
lundi 18/05 au plus tard. Bien sûr vous pouvez le rendre avant la 4
mai (période de début de stage) mais étant données les circonstances,
il peut être profitable d'avoir quelques jours en plus pour terminer
la rédaction ou quelques expériences.
</p>

<p>
Sur la feuille partagée
(<a href="https://docs.google.com/spreadsheets/d/1JGzmMIDMTK_GEKYqC3VqkCOqfHJkTtVqImSHOnZMzoI">vous devez le connaître mais aller voir quand même</a>). 
il y a la liste des groupes et des sujets.  Si vous n'êtes pas
inscrit.e.s sur cette feuille, c'est désormais urgent de le faire.
</p>
</div>


<div id="outline-container-org467bb2f" class="outline-4">
<h4 id="org467bb2f">Visio-conférence sur le projet le 23/03 matin</h4>
<div class="outline-text-4" id="text-org467bb2f">
<p>
Lundi 23/03 matin, plusieurs visio-conférences vont être organisées
pour discuter des projets. Pour cela, nous allons utiliser zoom. C'est
facile à installer et gratuit: <a href="https://us04web.zoom.us/">https://us04web.zoom.us/</a>. Il y aura une
réunion zoom par sujet de projet.
</p>


<p>
L'objectif est d'avoir une réunion zoom avec toutes les personnes
traitant du même projet pour partager les informations, difficultés et
solutions. Cela veut dire de votre côté de vous organiser pour être
connecté.e.s à ce moment là et être à l'heure. Je vais envoyer un
planning bientôt.
</p>

<p>
Chaque réunion commencera par un tour de parole où chaque groupe
résumera brièvement où il en est, et les questions qu'il souhaite
aborder.  Pour préparer ces réunions, il est important de préparer une
liste de questions et de me l'envoyer en avance d'ici vendredi
(inclus).
</p>

<p>
D'ici là, n'hésitez pas à me contacter par mail, et on peut faire une
visio si besoin.
</p>
</div>
</div>

<div id="outline-container-org208404d" class="outline-4">
<h4 id="org208404d">A rendre pour le 18/05</h4>
<div class="outline-text-4" id="text-org208404d">
<p>
A rendre, un rapport au format pdf et une archive avec le code. Le
rapport d'une dizaine de pages, doit décrire:
</p>
<ul class="org-ul">
<li>les données et la tâche abordées, en particulier les hypothèses,
pré-traitement et quelles sont les entrées et sorties</li>
<li>les problématiques abordées et les solutions mise en pratique</li>
<li>les résultats décrits, commentés et analysés.</li>
</ul>

<p>
L'archive contenant le code ne doit contenir que le code et pas les
données. Si vous le jugez nécessaire, il est possible d'échanger les
données par drive interposé. Une solution est de m'envoyer l'archive
avec votre rapport par mail, ou de m'envoyer l'adresse d'un dépôt.
</p>
</div>
</div>
</div>
</div>


<div id="outline-container-org0883a09" class="outline-2">
<h2 id="org0883a09">The resources / drive</h2>
<div class="outline-text-2" id="text-org0883a09">
<p>
<a href="https://drive.google.com/drive/folders/14qRch6tlVatxf7ZidOv_MwwStaQmXagK?usp=sharing">Look at this drive</a> for the slides and the material of lab sessions.
</p>
</div>
</div>


<div id="outline-container-orga58ef05" class="outline-2">
<h2 id="orga58ef05">Expected schedules</h2>
<div class="outline-text-2" id="text-orga58ef05">
<p>
It starts in january 2020 (the 6th). The course are scheduled on
monday, starting at 8:30 in the morning.
</p>

<p>
The first part: 
</p>
<ul class="org-ul">
<li>6/01, course: introduction and basics on machine learning
<ul class="org-ul">
<li>The main tasks</li>
<li>Objective function</li>
<li>Optimisation with gradient descent</li>
</ul></li>
<li>13/01, <b><b>lab session</b></b> : machine learning and python, first steps 
<ul class="org-ul">
<li>numpy and matplotlib</li>
<li>logistic regression by hand</li>
</ul></li>
<li>20/01, course on feed-forward neural networks
<ul class="org-ul">
<li>Multi-class classification</li>
<li>From linear to non-linear classification</li>
<li>The feed-forward architecture and the back-propagation algorithm</li>
</ul></li>
<li>27/01, course on  deep-learning
<ul class="org-ul">
<li>Deep networks</li>
<li>Drop out, regularization  and other tricks</li>
<li>pytorch overview</li>
</ul></li>
<li>03/02, <b><b>lab session</b></b> : deep-learning in pytorch</li>

<li>10/02, course: Embedding and sequence processing with convolution (part 1)</li>
</ul>

<p>
The second part: 
</p>
<ul class="org-ul">
<li>02/03, course: Convolutional (part 2)  and recurrent deep-networks
<ul class="org-ul">
<li>reminder on 1D convolution</li>
<li>2D convolution for image processing</li>
<li>Recurrent net</li>
</ul></li>
<li>09/03, <b><b>lab session</b></b>: Sequence classification with 1D convolution</li>
<li>23/03, course: TBA</li>
<li>30/03, course: TBA</li>
</ul>
</div>
</div>




<div id="outline-container-org48f0a8f" class="outline-2">
<h2 id="org48f0a8f">Projects</h2>
<div class="outline-text-2" id="text-org48f0a8f">
<p>
Here, you can find a list of possible projects. Feel free to interact with me. For some of them, just ask me the data, otherwise a link is provided. Of course, you can also propose a project. 
</p>
</div>

<div id="outline-container-org80377b4" class="outline-3">
<h3 id="org80377b4">Project list</h3>
<div class="outline-text-3" id="text-org80377b4">
<ul class="org-ul">
<li>Reconstruction of the vorticity field of a flow behind a cylinder from a handful sensors on the cylinder surface</li>
</ul>

<a href="https://arxiv.org/abs/1902.07358">
<img src="/assets/figs/cylinder.png" alt="Velocity fields" style="width:300px; margin:0px auto;display:block"/>
</a>


<ul class="org-ul">
<li>The mean sea surface temperature reconstruction <a href="https://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html">from weekly sea surface temperatures for the last 26 years</a>. You can also have access to other measures.</li>
</ul>

<a href="https://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html">
<img src="/assets/figs/sea.png" alt="Sea surface temperature" style="width:300px; margin:0px auto;display:block"/>
</a>
<p>
See below for more details
</p>
<ul class="org-ul">
<li>Chemistry: Predict the standard density of pure fluids, using a newly compiled database. From SMILES description, how can we predict density ? Ask me for the data and tools.</li>

<li>Classify sleep and arousal stages from physiological signals including: electroencephalography (EEG), electrooculography (EOG), electromyography (EMG), electrocardiology (EKG), and oxygen saturation (SaO2). <a href="https://physionet.org/content/challenge-2018/1.0.0/">See the challenge page for more details</a></li>

<li>Classify, from a single short ECG lead recording (between 30 s and 60 s in length), whether the recording shows normal sinus rhythm, atrial fibrillation (AF), an alternative rhythm, or is too noisy to be classified: <a href="https://physionet.org/content/challenge-2017/1.0.0/">The challenge page</a>.</li>

<li><a href="https://www.kaggle.com/c/LANL-Earthquake-Prediction/data">Using seismic signals to predict the timing of laboratory earthquakes</a>.</li>

<li>Quantum-mechanical molecular energies prediction from the raw molecular geometry: <a href="http://moleculenet.ai/datasets-1">see the QM7 database</a>.</li>

<li>Classify Molecule polarization: the data comes from time-lapse
fluorescence microscopy images of the bacterium Pseudomonas fluorescens SBW25. Each image is an individual bacterial cell. These bacteria produce a molecule called pyoverdin which is naturally fluorescent, so the images show the distribution of this molecule inside the cells. We have discovered that there are two distribution patterns of this molecule: homogeneous, or accumulated at the cell pole ("polarized").</li>
</ul>


<ul class="org-ul">
<li>Jet Flavor Classification in High-Energy Physics: <a href="http://mlphysics.ics.uci.edu/">http://mlphysics.ics.uci.edu/</a></li>

<li>Recognize decays in real high energy physics experiment: <a href="https://www.kaggle.com/c/beta-beta-decay-identification/data">https://www.kaggle.com/c/beta-beta-decay-identification/data</a></li>

<li>A project associated with the course of statistical physics</li>

<li>And one on "de novo peptide sequencing" with neural network</li>
</ul>
</div>
</div>


<div id="outline-container-org89bc2cd" class="outline-3">
<h3 id="org89bc2cd">Ocean data</h3>
<div class="outline-text-3" id="text-org89bc2cd">
<p>
The datasets from <a href="https://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html">this site</a> provide different kind of measures. It is possible to consider different project. The datasets are in special format. To read it in python, you can use two python librairies: 
</p>
<ul class="org-ul">
<li><i>netCDF4</i> is used to read the data</li>
<li><i>basemap</i> to plot the earth map</li>
</ul>
<p>
If you use anaconda, you can install them with <i>conda install</i>. A notebook (quickly written) is available on the course drive (in datasets/Ocean) to show how to read the data. 
</p>



<p>
You can also read them with scipy as proposed below but I don't understand the resulting data encoding. So I would not recommend it. 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #00ffff;">from</span> scipy.io <span style="color: #00ffff;">import</span> netcdf
<span style="color: #eedd82;">nc</span> = netcdf.netcdf_file(<span style="color: #ffa07a;">"./Downloads/sst.wkmean.1981-1989.nc"</span>,<span style="color: #ffa07a;">'r'</span>)
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Acces to the variable list </span>
<span style="color: #00ffff;">print</span>(nc.variables)
Out:   OrderedDict([(<span style="color: #ffa07a;">'lat'</span>, &lt;scipy.io.netcdf.netcdf_variable at 0x10422c208&gt;),
               (<span style="color: #ffa07a;">'lon'</span>, &lt;scipy.io.netcdf.netcdf_variable at 0x10422c1d0&gt;),
               (<span style="color: #ffa07a;">'time'</span>, &lt;scipy.io.netcdf.netcdf_variable at 0x10422c4e0&gt;),
               (<span style="color: #ffa07a;">'time_bnds'</span>, &lt;scipy.io.netcdf.netcdf_variable at 0x10422c550&gt;),
               (<span style="color: #ffa07a;">'sst'</span>, &lt;scipy.io.netcdf.netcdf_variable at 0x10422c6d8&gt;)])
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Get the time array </span>
<span style="color: #eedd82;">time</span> = nc.variables[<span style="color: #ffa07a;">'time'</span>]
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">This is a "netcdf" variable, to access the data as numpy array</span>
<span style="color: #00ffff;">print</span>(time.data)
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">You can also try with 'sst' to get the temperature</span>
</pre>
</div>

<p>
Several application can be considered as a project: 
</p>
<ul class="org-ul">
<li>Like in <a href="https://arxiv.org/abs/1902.07358">this paper</a>, you can learn to reconstruct the map given some
known points (for example randomly selected). In the paper they only
use a "shallow" decoder, of course you can try it, but the project
should explore a more advanced architecture like convolutional
network (or in this case: deconvolution).</li>
<li>For a given number of measures, can we optimize the place of this
measures to improve the reconstruction ?</li>
<li>And what if the sensors move ?</li>
<li>A time prediction can be also an interesting task. This means predicting the sst given the week before.</li>
</ul>
</div>
</div>
</div>



<div id="outline-container-orga27ee1e" class="outline-2">
<h2 id="orga27ee1e">Pytorch</h2>
<div class="outline-text-2" id="text-orga27ee1e">
</div>
<div id="outline-container-orgc5eac98" class="outline-3">
<h3 id="orgc5eac98">How to save a model to share and resume training</h3>
<div class="outline-text-3" id="text-orgc5eac98">
<p>
The key structure in pytorch is the <b><b>state dict</b></b> for state
dictionnary.  The learnable parameters (i.e. weights and biases) of an
torch.nn.Module model are contained in the model’s parameters
(accessed with model.parameters()). A state dict is simply a Python
dictionary object that maps each layer to its parameter tensor. The
basic idea is to save and load this dictionnary to easily deal with
parameters in a consistent way. Note that only layers with learnable
parameters (convolutional layers, linear layers, etc.). 
</p>

<p>
To resume a training process you need to restore the model in its full
state, but also the optimizer. Optimizer objects (torch.optim) also
have a state dict, which contains information about the optimizer’s
state, as well as the hyperparameters used.
</p>
</div>


<div id="outline-container-org8e9691a" class="outline-4">
<h4 id="org8e9691a">Creating state dict a model and an optimizer</h4>
<div class="outline-text-4" id="text-org8e9691a">
<p>
Assume you have a model like 
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Define model</span>
<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">TheModelClass</span>(nn.Module):
    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">__init__</span>(<span style="color: #00ffff;">self</span>):
        <span style="color: #b0c4de;">super</span>(TheModelClass, <span style="color: #00ffff;">self</span>).__init__()
        <span style="color: #00ffff;">self</span>.conv1 = nn.Conv2d(3, 6, 5)
        <span style="color: #00ffff;">self</span>.pool = nn.MaxPool2d(2, 2)
        <span style="color: #00ffff;">self</span>.conv2 = nn.Conv2d(6, 16, 5)
        <span style="color: #00ffff;">self</span>.fc1 = nn.Linear(16 * 5 * 5, 120)
        <span style="color: #00ffff;">self</span>.fc2 = nn.Linear(120, 84)
        <span style="color: #00ffff;">self</span>.fc3 = nn.Linear(84, 10)

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">forward</span>(<span style="color: #00ffff;">self</span>, x):
        <span style="color: #eedd82;">x</span> = <span style="color: #00ffff;">self</span>.pool(F.relu(<span style="color: #00ffff;">self</span>.conv1(x)))
        <span style="color: #eedd82;">x</span> = <span style="color: #00ffff;">self</span>.pool(F.relu(<span style="color: #00ffff;">self</span>.conv2(x)))
        <span style="color: #eedd82;">x</span> = x.view(-1, 16 * 5 * 5)
        <span style="color: #eedd82;">x</span> = F.relu(<span style="color: #00ffff;">self</span>.fc1(x))
        <span style="color: #eedd82;">x</span> = F.relu(<span style="color: #00ffff;">self</span>.fc2(x))
        <span style="color: #eedd82;">x</span> = <span style="color: #00ffff;">self</span>.fc3(x)
        <span style="color: #00ffff;">return</span> x

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Initialize model</span>
<span style="color: #eedd82;">model</span> = TheModelClass()

<span style="color: #eedd82;">model_state_d</span> = model.state_dict()
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">iter on the keys of the dictionnary</span>
<span style="color: #00ffff;">for</span> param_tensor <span style="color: #00ffff;">in</span> model_state_d:
    <span style="color: #00ffff;">print</span>(param_tensor, <span style="color: #ffa07a;">"\t"</span>, model_state_d[param_tensor].size())

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">You want to access to a specific tensor of parameter</span>
<span style="color: #00ffff;">print</span>(model_state_d[<span style="color: #ffa07a;">"conv1.bias"</span>]) 
</pre>
</div>


<p>
You can do the same for the optimizer.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Initialize optimizer</span>
<span style="color: #eedd82;">optimizer</span> = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Print optimizer's state_dict</span>
<span style="color: #00ffff;">print</span>(<span style="color: #ffa07a;">"Optimizer's state_dict:"</span>)
<span style="color: #00ffff;">for</span> var_name <span style="color: #00ffff;">in</span> optimizer.state_dict():
    <span style="color: #00ffff;">print</span>(var_name, <span style="color: #ffa07a;">"\t"</span>, optimizer.state_dict()[var_name])
</pre>
</div>

<p>
In general you don't need to look at the details yourself. You may
want to save these parameters in a single file to restore your
training session. 
</p>
</div>
</div>

<div id="outline-container-org8aa4fc7" class="outline-4">
<h4 id="org8aa4fc7">Saving a training session</h4>
<div class="outline-text-4" id="text-org8aa4fc7">
<p>
First, we can create an object to gather and store all the necessary
data (parameters). And then we can write it in a file. Later we will
be able to reload it.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Here we create a dictionnary to store what we need: </span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">1/ the epoch number</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">2/ the paramters of the model</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">3/ the paramters of the optimizer</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">4/ the loss function we used</span>
<span style="color: #eedd82;">tosave_data</span> = 
{
            <span style="color: #ffa07a;">'epoch'</span>: epoch_counter,
            <span style="color: #ffa07a;">'model_state_dict'</span>: model.state_dict(),
            <span style="color: #ffa07a;">'optimizer_state_dict'</span>: optimizer.state_dict(),
            <span style="color: #ffa07a;">'loss'</span>: loss,
}
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Write a pickle file using pytorch </span>
torch.save(tosave_data, <span style="color: #ffa07a;">"/the/path/to/my/file"</span>)
</pre>
</div>

<p>
And that's it ! 
</p>
</div>
</div>

<div id="outline-container-org90a2a81" class="outline-4">
<h4 id="org90a2a81">Resume training</h4>
<div class="outline-text-4" id="text-org90a2a81">
<p>
Now we can read a file to restore the training session. 
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">First create objects of the good types </span>
<span style="color: #eedd82;">prev_model</span> = TheModelClass()
<span style="color: #eedd82;">prev_optimizer</span> = optim.SGD(model.parameters(),lr=0.1)

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Load the pickle file to read the dictionnary from the file</span>
<span style="color: #eedd82;">checkpoint</span> = torch.load(<span style="color: #ffa07a;">"/the/path/to/my/file"</span>)

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">restore the model and optimizer states: </span>
prev_model.load_state_dict(checkpoint[<span style="color: #ffa07a;">'model_state_dict'</span>])
prev_optimizer.load_state_dict(checkpoint[<span style="color: #ffa07a;">'optimizer_state_dict'</span>])
<span style="color: #eedd82;">epoch</span> = checkpoint[<span style="color: #ffa07a;">'epoch'</span>]
</pre>
</div>
</div>
</div>
</div>
</div>
